//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Niva.Erp.Models.Contracts
{
    using Abp.Domain.Entities;
    using Abp.Domain.Entities.Auditing;
    using Niva.Erp.Models.Conta;
    using Niva.Erp.Models.Conta.Enums;
    using Niva.Erp.Models.Deconturi;
    using Niva.Erp.Models.Economic;
    using Niva.Erp.Models.Economic.Casierii;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;

    public partial class Invoices : AuditedEntity<int>, IMustHaveTenant
    {
        public virtual DateTime OperationDate { get; set; }

        public virtual DateTime InvoiceDate { get; set; }

        [StringLength(1000)]
        public virtual string InvoiceNumber { get; set; }

        [StringLength(1000)]
        public virtual string InvoiceSeries { get; set; }

        [ForeignKey("ActivityType")]
        public virtual int? ActivityTypeId { get; set; } // tip fond
        public virtual ActivityType ActivityType { get; set; }

        public virtual Decimal Value { get; set; }

        public virtual Decimal ValueLocalCurr { get; set; }

        public virtual Decimal VAT { get; set; }

        public virtual Decimal VATLocalCurr { get; set; }

        public virtual DateTime? DueDate { get; set; }

        [StringLength(1000)]
        public virtual string Description { get; set; }

        [StringLength(1000)]
        public virtual string RegNumber { get; set; }

        public virtual DateTime? RegDate { get; set; }

        [ForeignKey("ThirdParty")]
        public virtual int? ThirdPartyId { get; set; }
        public virtual Person ThirdParty { get; set; }
        public DateTime? StartDatePeriod { get; set; }
        public DateTime? EndDatePeriod { get; set; }

        public virtual IList<InvoiceDetails> InvoiceDetails { get; set; }

        public virtual State State { get; set; }

        public virtual ThirdPartyQuality ThirdPartyQuality { get; set; }

        [ForeignKey("ContaOperation")]
        public virtual int? ContaOperationId { get; set; }
        public virtual Operation ContaOperation { get; set; }

        // Reprezinta moneda de plata
        [ForeignKey("Currency")]
        public virtual int CurrencyId { get; set; }
        public virtual Currency Currency { get; set; }

        [ForeignKey("Contracts")]
        public virtual int? ContractsId { get; set; }
        public virtual Contracts Contracts { get; set; }

        [ForeignKey("DocumentType")]
        public virtual int DocumentTypeId { get; set; }
        public virtual DocumentType DocumentType { get; set; }

        [ForeignKey("Decont")]
        public int? DecontId { get; set; }
        public virtual Decont Decont { get; set; }

        public virtual bool HasDecont { get; set; }

        public virtual Decimal FileDocValue { get; set; }

        public virtual int FileDocId { get; set; }

        public virtual IList<DispositionInvoice> DispositionInvoices { get; set; }
        public virtual IList<PaymentOrderInvoice> PaymentOrderInvoices { get; set; }    

        public int TenantId { get; set; }

        public decimal TotalPlatit
        {
            get { return HasDecont == true ?
                        (Value == 0 ? FileDocValue : Value) :
                        PaymentOrderInvoices.Where(f => f.State == State.Active).Sum(f => f.PayedValue) + DispositionInvoices.Where(f => f.State == State.Active).Sum(f => f.PayedValue); }
        }

        public decimal RestPlata
        {
            get
            {
                if (ForcePaid)
                    return 0;
                else
                    return (Value == 0 ? FileDocValue : Value) - TotalPlatit;
            }
        }
        public bool DecontareInLei { get; set; }
        public decimal? CursValutar { get; set; }

        [ForeignKey("MonedaFactura")]
        public virtual int? MonedaFacturaId { get; set; }
        public virtual Currency MonedaFactura { get; set; }
        public decimal? ValoareTotalaFactura { get; set; }         
        public virtual bool ForcePaid { get; set; }
    }
}

